import logging

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from course.bot.states import UserStates
from db.service import add_refund, get_user_by_id, update_refund_status
from filter import admin_id

refund_router = Router()


def back():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]])
    return keyboard


@refund_router.message(F.text == '–í–æ–∑–≤—Ä–∞—Ç', UserStates.education_menu)
async def start_refund_process(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=back())
    await state.set_state(UserStates.refund_name)


@refund_router.message(UserStates.refund_name)
async def refund_name(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        buttons = [
            [KeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ"),
             KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")],
            [KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–≤'),
             KeyboardButton(text='–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∂–∞–ª–æ–±–∞')],
            [KeyboardButton(text='–í–æ–∑–≤—Ä–∞—Ç'),
             KeyboardButton(text='–í–æ–ø—Ä–æ—Å –ø–æ –∫—É—Ä—Å—É')],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        await state.set_state(UserStates.education_menu)
        return

    await state.update_data({"name": message.text})
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=back())
    await state.set_state(UserStates.refund_surname)


@refund_router.message(UserStates.refund_surname)
async def refund_details(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=back())
        await state.set_state(UserStates.refund_name)
        return

    data = await state.get_data()
    data['surname'] = message.text

    button = [[
        KeyboardButton(text="–£–∑—É–º –°–∞–≤–¥–æ"),
        KeyboardButton(text="–°–ú–ú –∫—É—Ä—Å"),
        KeyboardButton(text="–ù–∞–∑–∞–¥")
    ]]

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=button)

    await message.answer("–ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ –≤—ã –æ–±—É—á–∞–ª–∏—Å—å?", reply_markup=keyboard)
    await state.update_data(data)
    await state.set_state(UserStates.refund_course)


@refund_router.message(UserStates.refund_course)
async def process_refund(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=back())
        await state.set_state(UserStates.refund_surname)
        return

    data = await state.get_data()
    data['course'] = message.text
    await state.update_data(data)

    await message.answer("–ù–∞ –∫–∞–∫–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã —É—á–∏–ª–∏—Å—å?", reply_markup=back())
    await state.set_state(UserStates.refund_stream)


@refund_router.message(UserStates.refund_stream)
async def process_refund(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        button = [[
            KeyboardButton(text="–£–∑—É–º –°–∞–≤–¥–æ"),
            KeyboardButton(text="–°–ú–ú –∫—É—Ä—Å"),
            KeyboardButton(text="–ù–∞–∑–∞–¥")
        ]]

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=button)

        await state.set_state(UserStates.refund_course)
        await message.answer("–ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ –≤—ã –æ–±—É—á–∞–ª–∏—Å—å?", reply_markup=keyboard)
        return

    data = await state.get_data()
    data['stream'] = message.text

    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞:", reply_markup=back())
    await state.update_data(data)
    await state.set_state(UserStates.refund_details)


@refund_router.message(UserStates.refund_details)
async def save_refund_request(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–ù–∞ –∫–∞–∫–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã —É—á–∏–ª–∏—Å—å?", reply_markup=back())
        await state.set_state(UserStates.refund_stream)
        return

    data = await state.get_data()

    try:
        new_refund = await add_refund(user_id=message.from_user.id, name=data['name'], surname=data['surname'],
                                      course=data['course'],
                                      stream=data['stream'], reason=message.text)
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –°–≤—è–∑–∞–ª–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                    callback_data=f"refund_{new_refund}"
                )
            ]
        ])
        user = await get_user_by_id(message.from_user.id)
        admin_chat_id = await admin_id(message.from_user.id, "refund")
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
        await message.bot.send_message(admin_chat_id,
                                       f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç!\n"
                                       f"–ò–º—è: {data['name']} {data['surname']}\n"
                                       f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                                       f"–ö—É—Ä—Å: {data['course']}\n"
                                       f"–ü–æ—Ç–æ–∫: {data['stream']}\n"
                                       f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}",
                                       reply_markup=inline_keyboard
                                       )

        await message.answer(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏–Ω—è—Ç. "
            "–í —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    buttons = [
        [KeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ"),
         KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–≤'),
         KeyboardButton(text='–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∂–∞–ª–æ–±–∞')],
        [KeyboardButton(text='–í–æ–∑–≤—Ä–∞—Ç'),
         KeyboardButton(text='–í–æ–ø—Ä–æ—Å –ø–æ –∫—É—Ä—Å—É')],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(UserStates.education_menu)


@refund_router.callback_query(lambda c: c.data.startswith("refund_"))
async def process_refund_call_record(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    request_id = callback.data.split("_")[-1]
    print(f"Current state: {await state.get_state()}")

    # –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    await callback.message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É No{request_id}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    await state.set_state(UserStates.refund_request)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data({"current_request_id": request_id})


@refund_router.message(UserStates.refund_request)
async def save_call_record(message: types.Message, state: FSMContext):
    print(await state.get_state())
    if message.content_type in ['audio', 'document', 'video', 'video_note', 'voice']:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ ID –∑–∞—è–≤–∫–∏
        state_data = await state.get_data()
        request_id = state_data.get('current_request_id')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        # file = await download_media(message)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–¥–æ–±—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç",
                    callback_data=f"confirm_refund_{request_id}"
                ), InlineKeyboardButton(
                    text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç",
                    callback_data=f"reject_refund_{request_id}"
                )
            ]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await message.answer(f"–ó–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ No{request_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=keyboard)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.")
    return


@refund_router.callback_query(lambda c: c.data.startswith("confirm_refund_"))
async def close_request(callback: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    request_id = callback.data.split("_")[-1]

    # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await update_refund_status(int(request_id), 'approved')

    await callback.message.edit_text(f"–í–æ–∑–≤—Ä–∞—Ç No{request_id} –∑–∞–∫—Ä—ã—Ç ‚úÖ")


@refund_router.callback_query(lambda c: c.data.startswith("reject_refund_"))
async def close_request(callback: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    request_id = callback.data.split("_")[-1]

    # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await update_refund_status(int(request_id), 'rejected')

    await callback.message.edit_text(f"–í–æ–∑–≤—Ä–∞—Ç No{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå")
